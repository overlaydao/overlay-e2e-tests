# Protocol P5 is a minor upgrade that adds support for smart contract upgradability, smart contract queries, relaxes some limitations and improves the structure of internal node datastructures related to accounts.
protocolVersion = 5

[out]
updateKeys = "/root/workdir/genesis/update-keys"
accountKeys = "/root/workdir/genesis/accounts"
bakerKeys = "/root/workdir/genesis/bakers"
identityProviders = "/root/workdir/genesis/idps"
anonymityRevokers = "/root/workdir/genesis/ars"
genesis = "/root/workdir/genesis/genesis.dat"
cryptographicParameters = "/root/workdir/genesis/global"
deleteExisting = true
genesisHash = "/root/workdir/genesis/genesis_hash"

[cryptographicParameters]
kind = "generate"
# A free-form string used to distinguish between different chains even if they share other parameters.
genesisString = "overlay-local-dev"

[[anonymityRevokers]]
kind = "existing"
source = "/root/anonymity-revokers/ar-info-1.json"

[[anonymityRevokers]]
kind = "existing"
source = "/root/anonymity-revokers/ar-info-2.json"

[[identityProviders]]
kind = "existing"
source = "/root/identity-providers/ip-info-0.json"

[[identityProviders]]
kind = "existing"
source = "/root/identity-providers/ip-info-1.json"

[[accounts]]
kind = "existing"
source = "/root/accounts/baker-0.json"
balance = "1000000000000000"
stake = "500000000000000"
restakeEarnings = true
bakerKeys = "/root/secrets/bakers/baker-0-credentials.json"

[[accounts]]
kind = "existing"
source = "/root/accounts/foundation-1.json"
balance = "1000000000000000"
foundation = true

[updates]
# 7 freshly generated root keys with threshold 5
root = { threshold = 5, keys = [{kind = "fresh", repeat = 7}]}
# 15 freshly generated level1 keys with threshold 7
level1 = { threshold = 7, keys = [{kind = "fresh", repeat = 15}]}
# 15 freshly generated level2 keys. All of level 2 chain updates can be done by the first 7 of the level 2 keys
[updates.level2]
keys = [{kind = "fresh", repeat = 15}]
emergency = {authorizedKeys = [0,1,2,3,4,5,6], threshold = 7}
protocol = {authorizedKeys = [0,1,2,3,4,5,6], threshold = 7}
electionDifficulty = {authorizedKeys = [0,1,2,3,4,5,6], threshold = 7}
euroPerEnergy = {authorizedKeys = [0,1,2,3,4,5,6], threshold = 7}
microCCDPerEuro = {authorizedKeys = [0,1,2,3,4,5,6], threshold = 7}
foundationAccount = {authorizedKeys = [0,1,2,3,4,5,6], threshold = 7}
mintDistribution = {authorizedKeys = [0,1,2,3,4,5,6], threshold = 7}
transactionFeeDistribution = {authorizedKeys = [0,1,2,3,4,5,6], threshold = 7}
gasRewards = {authorizedKeys = [0,1,2,3,4,5,6], threshold = 7}
poolParameters = {authorizedKeys = [0,1,2,3,4,5,6], threshold = 7}
addAnonymityRevoker = {authorizedKeys = [0,1,2,3,4,5,6], threshold = 7}
addIdentityProvider = {authorizedKeys = [0,1,2,3,4,5,6], threshold = 7}
cooldownParameters = {authorizedKeys = [0,1,2,3,4,5,6], threshold = 7}
timeParameters = {authorizedKeys = [0,1,2,3,4,5,6], threshold = 7}

[parameters]
# comment out genesisTime to use current time for genesis time.
# genesisTime = "YYYY-MM-DDTHH:mm:SSZ"
slotDuration = 250 # in ms
leadershipElectionNonce = "d1bc8d3ba4afc7e109612cb73acbdddac052c93025aa1f82942edabb7deb82a1"
epochLength = 400 # in slots, so 100s
maxBlockEnergy = 3_000_000

[parameters.finalization]
minimumSkip = 0
committeeMaxSize = 1000
waitingTime = 100
skipShrinkFactor = 0.5
skipGrowFactor = 2
delayShrinkFactor = 0.5
delayGrowFactor = 2
allowZeroDelay = true

[parameters.chain]
version = "v1"
electionDifficulty = 0.05
euroPerEnergy = 0.00002
microCCDPerEuro = 500_000
accountCreationLimit = 10
[parameters.chain.timeParameters]
rewardPeriodLength = 4 # 4 epochs
mintPerPayday = 2.61157877e-4
[parameters.chain.poolParameters]
passiveFinalizationCommission = 1.0
passiveBakingCommission = 0.12
passiveTransactionCommission = 0.12
finalizationCommissionRange = {max = 1.0,min = 1.0}
bakingCommissionRange = {max = 0.1,min = 0.1}
transactionCommissionRange = {max = 0.1,min = 0.1}
minimumEquityCapital = "1000"
capitalBound = 0.1
leverageBound = {denominator = 1, numerator = 3}
[parameters.chain.cooldownParameters]
poolOwnerCooldown = 800 # in seconds
delegatorCooldown = 1000 # in seconds
[parameters.chain.rewardParameters]
mintDistribution = { bakingReward = 0.85, finalizationReward = 0.05 }
transactionFeeDistribution = { baker = 0.45, gasAccount = 0.45 }
gASRewards = { baker = 0.25, finalizationProof = 0.005, accountCreation = 0.02, chainUpdate = 0.005 }
